package codigo;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
        
    // Añadir este método para utilizar ComplexSymbolFactory
    public ComplexSymbolFactory getSymbolFactory() {
        return new ComplexSymbolFactory();
    }

:};

terminal Linea, T_dato, Int, If, Else, While, 
    Igual, Suma, Resta, Multiplicacion, Division, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Main, P_coma, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, IF, WHILE;

start with INICIO;

INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA WHILE |
    WHILE
;

DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Igual Numero P_coma |
    T_dato Identificador P_coma | 
    T_dato Identificador Igual Numero P_coma
;

IF ::= If Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

WHILE ::= While Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;
