package codigo;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
        
    // Añadir este método para utilizar ComplexSymbolFactory
    public ComplexSymbolFactory getSymbolFactory() {
        return new ComplexSymbolFactory();
    }

:};

terminal IdentificationDivision, DataDivision, ProcedureDivision, ProgramId,
	WorkingStorageSection, Nivel, TipoDato, ValorEspecial, StopRun, Display, Accept, Compute,
	Suma, Resta, Multiplicacion, Division, If, Else, Pic, Value, 
	Igual, MenorQue, MayorQue, MenorIgual, MayorIgual, Diferente,
	Punto, Identificador, Numero, NumeroDecimal, Cadena, ERROR;

non terminal INICIO, DATA, PROCEDIMIENTO, DECLARACION, LITERAL, SENTENCIAS, SENTENCIA, 
	MOSTRAR, EXPRESION, CONDICIONALES_ESTRUCTURA, IFCONDITION, VALOR, CONDICION;


INICIO ::= IdentificationDivision Punto ProgramId Punto Identificador Punto DATA PROCEDIMIENTO;

DATA ::= DataDivision Punto WorkingStorageSection Punto DECLARACION Punto;

DECLARACION ::= Nivel Identificador Pic TipoDato Value LITERAL Punto |
				Nivel Identificador Pic TipoDato Punto;

LITERAL ::= Numero | NumeroDecimal | Cadena | ValorEspecial;

PROCEDIMIENTO ::= ProcedureDivision Punto SENTENCIAS StopRun Punto;

SENTENCIAS ::= SENTENCIA | SENTENCIAS SENTENCIA;

SENTENCIA ::= Display MOSTRAR Punto |
				Accept Identificador Punto |
				Compute Identificador Igual EXPRESION Punto |
				CONDICIONALES_ESTRUCTURA Punto;
				
MOSTRAR ::= Cadena | Identificador;

EXPRESION ::= Identificador | LITERAL |
				Identificador Suma Identificador |
				Identificador Resta Identificador |
				Identificador Multiplicacion Identificador |
				Identificador Division Identificador ;

CONDICIONALES_ESTRUCTURA ::= IFCONDITION;

IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA |
				If VALOR CONDICION VALOR SENTENCIA Else SENTENCIA; 
		
VALOR ::= Identificador | Numero | Cadena | NumeroDecimal | ValorEspecial;

CONDICION ::= Igual | MenorQue | MayorQue | MenorIgual | MayorIgual | Diferente;














terminal Linea, T_dato, Int, If, Else, While, 
    Igual, Suma, Resta, Multiplicacion, Division, Parentesis_a, Parentesis_c,
    Llave_a, Llave_c, Main, P_coma, Identificador, Numero, ERROR;

non terminal INICIO, SENTENCIA, DECLARACION, IF, WHILE;

start with INICIO;

INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA WHILE |
    WHILE
;

DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Igual Numero P_coma |
    T_dato Identificador P_coma | 
    T_dato Identificador Igual Numero P_coma
;

IF ::= If Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

WHILE ::= While Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;
