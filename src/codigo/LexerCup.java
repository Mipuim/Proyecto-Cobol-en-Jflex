/* The following code was generated by JFlex 1.4.3 on 4/07/24 18:57 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/07/24 18:57 from the specification file
 * <tt>C:/Users/SARA/eclipse-workspace/ProyectoCobol/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  4,  0,  0,  3,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    15,  0, 44,  0,  0,  0,  0, 26, 42, 43,  5, 36,  3, 23, 41, 37, 
    28, 29,  2,  2,  2,  2,  2, 27,  2, 30,  0,  0, 39, 38, 40,  0, 
     0, 13,  1, 12,  7,  8, 11, 21,  1,  6,  1, 25, 33, 22,  9, 14, 
    18,  1, 19, 17, 10, 20, 16, 24, 32, 35, 34,  0, 31,  0,  0,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 45,  1, 
     1,  1,  1,  1, 45,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\10\2\1\6"+
    "\1\2\1\1\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\3\1\1\2\1\3\1\4\1\5\10\2\1\6\1\2"+
    "\1\1\1\7\1\10\1\11\1\12\1\13\1\14\2\1"+
    "\1\15\1\2\1\16\12\2\10\0\1\17\1\20\1\21"+
    "\3\0\1\22\1\0\1\2\1\3\1\15\1\4\1\2"+
    "\1\16\12\2\10\0\1\17\1\20\1\21\3\0\1\22"+
    "\10\2\1\23\2\2\10\0\1\2\1\3\1\15\1\4"+
    "\10\2\1\23\2\2\12\0\1\22\3\2\1\24\7\2"+
    "\3\0\1\25\2\0\1\3\1\0\1\2\1\3\1\15"+
    "\1\4\3\2\1\24\7\2\4\0\1\25\3\0\1\3"+
    "\2\0\1\22\2\2\1\0\2\2\1\26\1\0\3\2"+
    "\4\0\1\2\1\3\1\15\1\4\2\2\1\0\2\2"+
    "\1\26\1\0\3\2\6\0\1\3\2\0\1\22\2\2"+
    "\1\0\1\2\1\27\1\0\3\2\1\30\3\0\1\2"+
    "\1\3\1\15\1\4\2\2\1\0\1\2\1\27\1\0"+
    "\3\2\1\30\6\0\1\3\2\0\1\22\1\2\1\31"+
    "\1\0\1\32\1\0\3\2\2\0\2\33\1\2\1\0"+
    "\1\34\1\2\2\0\1\35\1\0\1\33\1\2\1\0"+
    "\1\2\3\0\1\2\2\0\1\36\1\0\1\35\1\2"+
    "\3\0\1\2\3\0\1\2\1\37\2\0\1\2\14\0"+
    "\1\40\11\0\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\134\0\u0114"+
    "\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\134"+
    "\0\u0284\0\u02b2\0\134\0\134\0\134\0\u02e0\0\u030e\0\u033c"+
    "\0\u036a\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u03c6\0\u047e"+
    "\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u03c6"+
    "\0\u05ee\0\u061c\0\u03c6\0\u03c6\0\u03c6\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u033c\0\u0730\0\212\0\u075e\0\u078c\0\u07ba"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\134"+
    "\0\134\0\134\0\u0a9a\0\u0398\0\u0ac8\0\134\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0b24\0\u0c0a\0\u0c38\0\u0c66"+
    "\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6"+
    "\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0af6"+
    "\0\u0af6\0\u0af6\0\u0f46\0\u0f74\0\u0fa2\0\u0af6\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\212\0\u1140"+
    "\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0"+
    "\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420"+
    "\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u130c\0\u1534\0\u1562"+
    "\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2"+
    "\0\u1700\0\u172e\0\u12de\0\u175c\0\u178a\0\u17b8\0\212\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\134\0\u19b2\0\u19e0\0\134\0\u1a0e\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1a3c\0\u1b7e\0\u1bac"+
    "\0\u1bda\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c"+
    "\0\u1d4a\0\u1a0e\0\u1d78\0\u1da6\0\u1dd4\0\u1a0e\0\u1e02\0\u1e30"+
    "\0\u1a0e\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16\0\212\0\u1f44"+
    "\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086\0\u20b4"+
    "\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6\0\u2224"+
    "\0\u20b4\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\u2086\0\u241e\0\u244c\0\u2086\0\u247a"+
    "\0\u24a8\0\u24d6\0\u2504\0\212\0\u2532\0\u2560\0\u258e\0\u25bc"+
    "\0\134\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe"+
    "\0\u272c\0\u275a\0\u2788\0\u27b6\0\u2674\0\u27e4\0\u2812\0\u2840"+
    "\0\u286e\0\u2646\0\u289c\0\u28ca\0\u28f8\0\u2926\0\u2954\0\u2982"+
    "\0\u2646\0\u29b0\0\u29de\0\u2646\0\u2a0c\0\212\0\u2a3a\0\212"+
    "\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa"+
    "\0\u2bd8\0\u2c06\0\134\0\u2c34\0\u2c62\0\u2c90\0\134\0\u2cbe"+
    "\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e"+
    "\0\u2e5c\0\u2e8a\0\134\0\u2eb8\0\u2e00\0\u2ee6\0\u2f14\0\u2f42"+
    "\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\134\0\u3084"+
    "\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4"+
    "\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\134\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6"+
    "\0\134\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\6\1\7\1\10\1\11\1\12"+
    "\3\4\1\13\1\14\1\4\1\6\1\15\1\16\1\17"+
    "\4\4\1\20\1\21\1\4\1\22\4\5\1\3\4\4"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\3"+
    "\1\32\1\4\1\33\1\34\1\35\1\36\1\6\1\37"+
    "\1\40\1\41\1\42\3\34\1\43\1\44\1\34\1\36"+
    "\1\45\1\46\1\47\4\34\1\50\1\51\1\34\1\52"+
    "\4\35\1\33\4\34\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\33\1\62\1\34\57\0\2\4\3\0"+
    "\11\4\1\0\7\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\2\0\1\5\30\0\4\5\12\0"+
    "\1\63\7\0\2\6\12\0\1\6\37\0\2\4\3\0"+
    "\1\4\1\64\3\4\1\65\3\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\1\66\6\4\1\67\1\4\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\3\0\11\4\1\0\7\4\1\0\2\4"+
    "\1\0\4\4\1\0\1\4\1\70\2\4\11\0\1\4"+
    "\1\0\2\4\3\0\10\4\1\71\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\6\4\1\72\2\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\7\4\1\73\1\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\4\4\1\74\4\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\1\75\10\4\1\0\3\4\1\76\3\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\3\0\10\4\1\77\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\12\0"+
    "\1\100\1\101\1\0\1\102\3\0\1\103\11\0\1\104"+
    "\1\105\1\0\1\106\1\0\1\102\1\0\1\107\61\0"+
    "\1\110\1\0\1\111\53\0\1\112\11\0\1\63\30\0"+
    "\4\63\46\0\1\113\26\0\37\114\1\115\14\114\1\116"+
    "\1\114\4\117\1\0\52\117\2\120\1\117\1\0\1\117"+
    "\11\120\1\117\7\120\1\117\2\120\1\117\4\120\1\117"+
    "\4\120\11\117\1\120\2\117\1\121\1\117\1\0\26\117"+
    "\4\121\12\117\1\122\7\117\1\123\1\6\12\117\1\123"+
    "\37\117\2\120\1\117\1\0\1\117\1\120\1\124\3\120"+
    "\1\125\3\120\1\117\7\120\1\117\2\120\1\117\4\120"+
    "\1\117\4\120\11\117\1\120\1\117\2\120\1\117\1\0"+
    "\1\117\1\126\6\120\1\127\1\120\1\117\7\120\1\117"+
    "\2\120\1\117\4\120\1\117\4\120\11\117\1\120\1\117"+
    "\2\120\1\117\1\0\1\117\11\120\1\117\7\120\1\117"+
    "\2\120\1\117\4\120\1\117\1\120\1\130\2\120\11\117"+
    "\1\120\1\117\2\120\1\117\1\0\1\117\10\120\1\131"+
    "\1\117\7\120\1\117\2\120\1\117\4\120\1\117\4\120"+
    "\11\117\1\120\1\117\2\120\1\117\1\0\1\117\6\120"+
    "\1\132\2\120\1\117\7\120\1\117\2\120\1\117\4\120"+
    "\1\117\4\120\11\117\1\120\1\117\2\120\1\117\1\0"+
    "\1\117\7\120\1\133\1\120\1\117\7\120\1\117\2\120"+
    "\1\117\4\120\1\117\4\120\11\117\1\120\1\117\2\120"+
    "\1\117\1\0\1\117\4\120\1\134\4\120\1\117\7\120"+
    "\1\117\2\120\1\117\4\120\1\117\4\120\11\117\1\120"+
    "\1\117\2\120\1\117\1\0\1\117\1\135\10\120\1\117"+
    "\3\120\1\136\3\120\1\117\2\120\1\117\4\120\1\117"+
    "\4\120\11\117\1\120\1\117\2\120\1\117\1\0\1\117"+
    "\10\120\1\137\1\117\7\120\1\117\2\120\1\117\4\120"+
    "\1\117\4\120\11\117\1\120\4\117\1\0\5\117\1\140"+
    "\1\141\1\117\1\142\3\117\1\143\11\117\1\144\1\145"+
    "\1\117\1\146\1\117\1\142\1\117\1\147\17\117\1\0"+
    "\41\117\1\150\1\117\1\151\11\117\1\0\41\117\1\152"+
    "\11\117\1\122\1\117\1\0\26\117\4\122\23\117\1\0"+
    "\22\117\1\153\26\117\4\154\1\114\32\154\1\155\14\154"+
    "\1\156\1\154\1\0\2\4\3\0\2\4\1\157\6\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\1\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\160\5\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\1\0\2\4\3\0\4\4\1\161\4\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\1\0\2\4\3\0\11\4\1\0\1\4"+
    "\1\162\5\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\1\0\2\4\3\0\11\4\1\0\6\4"+
    "\1\163\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\6\4\1\164\2\4\1\0"+
    "\7\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\11\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\1\4\1\165\2\4\11\0"+
    "\1\4\1\0\2\4\3\0\10\4\1\166\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\3\0\6\4\1\167\2\4\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\3\0\10\4\1\170\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\3\4\1\171\3\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\23\0"+
    "\1\172\47\0\1\173\77\0\1\174\54\0\1\106\52\0"+
    "\1\175\57\0\1\175\57\0\1\176\26\0\1\177\47\0"+
    "\1\200\30\0\4\200\74\0\1\114\4\201\1\0\52\201"+
    "\2\202\1\201\1\0\1\201\11\202\1\201\7\202\1\201"+
    "\2\202\1\201\4\202\1\201\4\202\11\201\1\202\2\201"+
    "\1\203\1\201\1\0\26\201\4\203\12\201\1\204\6\201"+
    "\1\204\1\201\1\0\26\201\4\204\22\201\1\205\1\6"+
    "\12\201\1\205\37\201\2\202\1\201\1\0\1\201\2\202"+
    "\1\206\6\202\1\201\7\202\1\201\2\202\1\201\4\202"+
    "\1\201\4\202\11\201\1\202\1\201\2\202\1\201\1\0"+
    "\1\201\11\202\1\201\1\202\1\207\5\202\1\201\2\202"+
    "\1\201\4\202\1\201\4\202\11\201\1\202\1\201\2\202"+
    "\1\201\1\0\1\201\4\202\1\210\4\202\1\201\7\202"+
    "\1\201\2\202\1\201\4\202\1\201\4\202\11\201\1\202"+
    "\1\201\2\202\1\201\1\0\1\201\11\202\1\201\1\202"+
    "\1\211\5\202\1\201\2\202\1\201\4\202\1\201\4\202"+
    "\11\201\1\202\1\201\2\202\1\201\1\0\1\201\11\202"+
    "\1\201\6\202\1\212\1\201\2\202\1\201\4\202\1\201"+
    "\4\202\11\201\1\202\1\201\2\202\1\201\1\0\1\201"+
    "\6\202\1\213\2\202\1\201\7\202\1\201\2\202\1\201"+
    "\4\202\1\201\4\202\11\201\1\202\1\201\2\202\1\201"+
    "\1\0\1\201\11\202\1\201\7\202\1\201\2\202\1\201"+
    "\4\202\1\201\1\202\1\214\2\202\11\201\1\202\1\201"+
    "\2\202\1\201\1\0\1\201\10\202\1\215\1\201\7\202"+
    "\1\201\2\202\1\201\4\202\1\201\4\202\11\201\1\202"+
    "\1\201\2\202\1\201\1\0\1\201\6\202\1\216\2\202"+
    "\1\201\7\202\1\201\2\202\1\201\4\202\1\201\4\202"+
    "\11\201\1\202\1\201\2\202\1\201\1\0\1\201\10\202"+
    "\1\217\1\201\7\202\1\201\2\202\1\201\4\202\1\201"+
    "\4\202\11\201\1\202\1\201\2\202\1\201\1\0\1\201"+
    "\11\202\1\201\3\202\1\220\3\202\1\201\2\202\1\201"+
    "\4\202\1\201\4\202\11\201\1\202\4\201\1\0\16\201"+
    "\1\221\36\201\1\0\10\201\1\222\44\201\1\0\32\201"+
    "\1\223\22\201\1\0\31\201\1\224\23\201\1\0\26\201"+
    "\1\225\26\201\1\0\30\201\1\225\24\201\1\0\32\201"+
    "\1\226\22\201\1\0\3\201\1\227\47\201\1\230\1\201"+
    "\1\0\26\201\4\230\17\201\4\231\1\114\32\231\1\232"+
    "\14\231\1\233\1\231\4\201\1\0\50\201\1\231\1\0"+
    "\2\4\3\0\3\4\1\234\5\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\2\4\1\235\4\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\7\4\1\236\1\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\2\4\1\237\6\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\2\4\1\240\4\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\2\4\1\241\6\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\4\4\1\242\2\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\2\4\1\243\4\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\6\4\1\244\2\4\1\0\5\4\1\245"+
    "\1\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\11\4\1\0\7\4\1\0"+
    "\1\4\1\246\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\24\0\1\247\72\0\1\250\46\0\1\251\55\0\1\252"+
    "\55\0\1\253\46\0\1\254\34\0\1\200\30\0\4\200"+
    "\14\0\1\255\2\0\4\256\1\0\52\256\2\257\1\256"+
    "\1\0\1\256\11\257\1\256\7\257\1\256\2\257\1\256"+
    "\4\257\1\256\4\257\11\256\1\257\2\256\1\260\1\256"+
    "\1\0\26\256\4\260\12\256\1\261\6\256\1\261\1\256"+
    "\1\0\26\256\4\261\22\256\1\262\1\6\12\256\1\262"+
    "\37\256\2\257\1\256\1\0\1\256\3\257\1\263\5\257"+
    "\1\256\7\257\1\256\2\257\1\256\4\257\1\256\4\257"+
    "\11\256\1\257\1\256\2\257\1\256\1\0\1\256\11\257"+
    "\1\256\2\257\1\264\4\257\1\256\2\257\1\256\4\257"+
    "\1\256\4\257\11\256\1\257\1\256\2\257\1\256\1\0"+
    "\1\256\7\257\1\265\1\257\1\256\7\257\1\256\2\257"+
    "\1\256\4\257\1\256\4\257\11\256\1\257\1\256\2\257"+
    "\1\256\1\0\1\256\2\257\1\266\6\257\1\256\7\257"+
    "\1\256\2\257\1\256\4\257\1\256\4\257\11\256\1\257"+
    "\1\256\2\257\1\256\1\0\1\256\11\257\1\256\2\257"+
    "\1\267\4\257\1\256\2\257\1\256\4\257\1\256\4\257"+
    "\11\256\1\257\1\256\2\257\1\256\1\0\1\256\2\257"+
    "\1\270\6\257\1\256\7\257\1\256\2\257\1\256\4\257"+
    "\1\256\4\257\11\256\1\257\1\256\2\257\1\256\1\0"+
    "\1\256\11\257\1\256\4\257\1\271\2\257\1\256\2\257"+
    "\1\256\4\257\1\256\4\257\11\256\1\257\1\256\2\257"+
    "\1\256\1\0\1\256\11\257\1\256\2\257\1\272\4\257"+
    "\1\256\2\257\1\256\4\257\1\256\4\257\11\256\1\257"+
    "\1\256\2\257\1\256\1\0\1\256\6\257\1\273\2\257"+
    "\1\256\5\257\1\274\1\257\1\256\2\257\1\256\4\257"+
    "\1\256\4\257\11\256\1\257\1\256\2\257\1\256\1\0"+
    "\1\256\11\257\1\256\7\257\1\256\1\257\1\275\1\256"+
    "\4\257\1\256\4\257\11\256\1\257\4\256\1\0\17\256"+
    "\1\276\35\256\1\0\34\256\1\277\20\256\1\0\25\256"+
    "\1\300\27\256\1\0\32\256\1\301\22\256\1\0\25\256"+
    "\1\302\27\256\1\0\25\256\1\303\27\256\1\0\16\256"+
    "\1\304\34\256\1\305\1\256\1\0\26\256\4\305\14\256"+
    "\1\306\2\256\4\307\1\114\32\307\1\310\14\307\1\311"+
    "\1\307\4\256\1\0\50\256\1\307\1\0\2\4\3\0"+
    "\4\4\1\312\4\4\1\0\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\1\0\2\4\3\0"+
    "\11\4\1\0\7\4\1\0\2\4\1\0\4\4\1\0"+
    "\1\4\1\313\2\4\11\0\1\4\1\0\2\4\3\0"+
    "\11\4\1\314\7\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\1\0\2\4\3\0\11\4\1\0"+
    "\4\4\1\315\2\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\1\0\2\4\3\0\11\4\1\0"+
    "\2\4\1\316\4\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\1\0\2\4\3\0\2\4\1\317"+
    "\6\4\1\0\7\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\1\0\2\4\3\0\11\4\1\320"+
    "\7\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\2\4\1\321\6\4\1\0"+
    "\7\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\11\4\1\0\3\4\1\322"+
    "\3\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\1\323\10\4\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\10\0\1\324\66\0\1\247\36\0\1\325\30\0\4\325"+
    "\21\0\1\326\30\0\4\326\35\0\1\324\37\0\4\327"+
    "\1\0\52\327\2\330\1\327\1\0\1\327\11\330\1\327"+
    "\7\330\1\327\2\330\1\327\4\330\1\327\4\330\11\327"+
    "\1\330\2\327\1\331\1\327\1\0\26\327\4\331\12\327"+
    "\1\332\6\327\1\332\1\327\1\0\26\327\4\332\22\327"+
    "\1\333\1\6\12\327\1\333\37\327\2\330\1\327\1\0"+
    "\1\327\4\330\1\334\4\330\1\327\7\330\1\327\2\330"+
    "\1\327\4\330\1\327\4\330\11\327\1\330\1\327\2\330"+
    "\1\327\1\0\1\327\11\330\1\327\7\330\1\327\2\330"+
    "\1\327\4\330\1\327\1\330\1\335\2\330\11\327\1\330"+
    "\1\327\2\330\1\327\1\0\1\327\11\330\1\336\7\330"+
    "\1\327\2\330\1\327\4\330\1\327\4\330\11\327\1\330"+
    "\1\327\2\330\1\327\1\0\1\327\11\330\1\327\4\330"+
    "\1\337\2\330\1\327\2\330\1\327\4\330\1\327\4\330"+
    "\11\327\1\330\1\327\2\330\1\327\1\0\1\327\11\330"+
    "\1\327\2\330\1\340\4\330\1\327\2\330\1\327\4\330"+
    "\1\327\4\330\11\327\1\330\1\327\2\330\1\327\1\0"+
    "\1\327\2\330\1\341\6\330\1\327\7\330\1\327\2\330"+
    "\1\327\4\330\1\327\4\330\11\327\1\330\1\327\2\330"+
    "\1\327\1\0\1\327\11\330\1\342\7\330\1\327\2\330"+
    "\1\327\4\330\1\327\4\330\11\327\1\330\1\327\2\330"+
    "\1\327\1\0\1\327\2\330\1\343\6\330\1\327\7\330"+
    "\1\327\2\330\1\327\4\330\1\327\4\330\11\327\1\330"+
    "\1\327\2\330\1\327\1\0\1\327\11\330\1\327\3\330"+
    "\1\344\3\330\1\327\2\330\1\327\4\330\1\327\4\330"+
    "\11\327\1\330\1\327\2\330\1\327\1\0\1\327\1\345"+
    "\10\330\1\327\7\330\1\327\2\330\1\327\4\330\1\327"+
    "\4\330\11\327\1\330\4\327\1\0\3\327\1\346\51\327"+
    "\1\0\14\327\1\347\36\327\1\350\1\327\1\0\26\327"+
    "\4\350\23\327\1\0\25\327\1\351\25\327\1\352\1\327"+
    "\1\0\26\327\4\352\23\327\1\0\11\327\1\346\41\327"+
    "\1\353\1\327\1\0\26\327\4\353\14\327\1\354\2\327"+
    "\4\355\1\114\32\355\1\356\14\355\1\357\1\355\4\327"+
    "\1\0\50\327\1\355\1\0\2\4\3\0\1\360\10\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\1\0\2\4\3\0\7\4\1\361\1\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\7\0\1\362\47\0\2\4\3\0\4\4"+
    "\1\363\4\4\1\0\7\4\1\0\2\4\1\0\4\4"+
    "\1\0\4\4\11\0\1\4\1\0\2\4\3\0\4\4"+
    "\1\364\4\4\1\0\7\4\1\0\2\4\1\0\4\4"+
    "\1\0\4\4\11\0\1\4\23\0\1\365\33\0\2\4"+
    "\3\0\1\4\1\366\7\4\1\0\7\4\1\0\2\4"+
    "\1\0\4\4\1\0\4\4\11\0\1\4\1\0\2\4"+
    "\3\0\7\4\1\367\1\4\1\0\7\4\1\0\2\4"+
    "\1\0\4\4\1\0\4\4\11\0\1\4\1\0\2\4"+
    "\3\0\3\4\1\370\5\4\1\0\7\4\1\0\2\4"+
    "\1\0\4\4\1\0\4\4\11\0\1\4\32\0\1\371"+
    "\25\0\1\325\27\0\1\372\4\325\21\0\1\326\27\0"+
    "\1\373\4\326\17\0\4\374\1\0\52\374\2\375\1\374"+
    "\1\0\1\374\11\375\1\374\7\375\1\374\2\375\1\374"+
    "\4\375\1\374\4\375\11\374\1\375\2\374\1\376\1\374"+
    "\1\0\26\374\4\376\12\374\1\377\6\374\1\377\1\374"+
    "\1\0\26\374\4\377\22\374\1\u0100\1\6\12\374\1\u0100"+
    "\37\374\2\375\1\374\1\0\1\374\1\u0101\10\375\1\374"+
    "\7\375\1\374\2\375\1\374\4\375\1\374\4\375\11\374"+
    "\1\375\1\374\2\375\1\374\1\0\1\374\7\375\1\u0102"+
    "\1\375\1\374\7\375\1\374\2\375\1\374\4\375\1\374"+
    "\4\375\11\374\1\375\4\374\1\0\2\374\1\u0103\47\374"+
    "\2\375\1\374\1\0\1\374\4\375\1\u0104\4\375\1\374"+
    "\7\375\1\374\2\375\1\374\4\375\1\374\4\375\11\374"+
    "\1\375\1\374\2\375\1\374\1\0\1\374\4\375\1\u0105"+
    "\4\375\1\374\7\375\1\374\2\375\1\374\4\375\1\374"+
    "\4\375\11\374\1\375\4\374\1\0\16\374\1\u0106\33\374"+
    "\2\375\1\374\1\0\1\374\1\375\1\u0107\7\375\1\374"+
    "\7\375\1\374\2\375\1\374\4\375\1\374\4\375\11\374"+
    "\1\375\1\374\2\375\1\374\1\0\1\374\7\375\1\u0108"+
    "\1\375\1\374\7\375\1\374\2\375\1\374\4\375\1\374"+
    "\4\375\11\374\1\375\1\374\2\375\1\374\1\0\1\374"+
    "\3\375\1\u0109\5\375\1\374\7\375\1\374\2\375\1\374"+
    "\4\375\1\374\4\375\11\374\1\375\4\374\1\0\25\374"+
    "\1\u010a\27\374\1\0\3\374\1\u010b\47\374\1\u010c\1\374"+
    "\1\0\25\374\1\u010d\4\u010c\21\374\1\u010e\1\374\1\0"+
    "\26\374\4\u010e\21\374\1\u010e\1\374\1\0\25\374\1\u010f"+
    "\4\u010e\21\374\1\u0110\1\374\1\0\26\374\4\u0110\14\374"+
    "\1\u0111\2\374\4\u0112\1\114\32\u0112\1\u0113\14\u0112\1\u0114"+
    "\1\u0112\4\374\1\0\50\374\1\u0112\1\0\2\4\3\0"+
    "\5\4\1\u0115\3\4\1\0\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\1\0\2\4\3\0"+
    "\11\4\1\0\7\4\1\0\2\4\1\0\4\4\1\0"+
    "\3\4\1\u0116\11\0\1\4\6\0\1\u0117\50\0\2\4"+
    "\3\0\2\4\1\u0118\6\4\1\0\7\4\1\0\2\4"+
    "\1\0\4\4\1\0\4\4\11\0\1\4\24\0\1\u0119"+
    "\32\0\2\4\3\0\11\4\1\0\4\4\1\u011a\2\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\3\0\11\4\1\0\6\4\1\u011b\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\1\0"+
    "\2\4\3\0\11\4\1\0\5\4\1\u011c\1\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\37\0"+
    "\1\u011d\55\0\1\u011e\23\0\1\u011f\51\0\2\4\2\0"+
    "\1\u011f\11\4\1\0\7\4\1\0\2\4\1\0\4\4"+
    "\1\0\4\4\11\0\1\4\2\0\1\5\2\0\1\u011f"+
    "\25\0\4\5\12\0\1\63\6\0\1\63\2\0\1\u011f"+
    "\25\0\4\63\22\0\2\6\1\u011f\11\0\1\6\37\0"+
    "\2\4\2\0\1\u011f\5\4\1\u0115\3\4\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\1\0\2\4\2\0\1\u011f\11\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\3\4\1\u0116\11\0\1\4"+
    "\5\0\1\u011f\1\u0117\50\0\2\4\2\0\1\u011f\2\4"+
    "\1\u0118\6\4\1\0\7\4\1\0\2\4\1\0\4\4"+
    "\1\0\4\4\11\0\1\4\5\0\1\u011f\16\0\1\u0119"+
    "\32\0\2\4\2\0\1\u011f\11\4\1\0\4\4\1\u011a"+
    "\2\4\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\2\0\1\u011f\11\4\1\0\6\4"+
    "\1\u011b\1\0\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\2\0\1\u011f\11\4\1\0\5\4"+
    "\1\u011c\1\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\5\0\1\u011f\24\0\1\371\25\0\1\325"+
    "\2\0\1\u011f\24\0\1\372\4\325\24\0\1\u011f\31\0"+
    "\1\u011d\20\0\1\326\2\0\1\u011f\24\0\1\373\4\326"+
    "\24\0\1\u011f\31\0\1\u011e\20\0\1\200\2\0\1\u011f"+
    "\25\0\4\200\14\0\1\255\2\0\5\114\1\u0120\31\114"+
    "\1\115\14\114\1\116\1\114\5\0\1\u011f\47\0\1\114"+
    "\1\0\2\4\3\0\1\u0121\10\4\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\20\0"+
    "\1\u0122\46\0\1\u0123\45\0\2\4\3\0\11\4\1\0"+
    "\3\4\1\u0124\3\4\1\0\2\4\1\0\4\4\1\0"+
    "\4\4\11\0\1\4\1\0\2\4\3\0\11\4\1\0"+
    "\7\4\1\u0125\2\4\1\0\4\4\1\0\4\4\11\0"+
    "\1\4\1\0\2\4\3\0\11\4\1\0\7\4\1\u0126"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\32\0"+
    "\1\u0127\43\0\1\u0128\11\0\1\u0127\23\0\4\u011f\1\0"+
    "\51\u011f\4\u0120\1\114\32\u0120\1\u0129\14\u0120\1\u011f\1\u0120"+
    "\1\0\2\4\3\0\6\4\1\u012a\2\4\1\0\7\4"+
    "\1\0\2\4\1\0\4\4\1\0\4\4\11\0\1\4"+
    "\6\0\1\u012b\50\0\2\4\3\0\2\4\1\u012c\6\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\6\0\1\u012d\70\0\1\u012e\66\0\1\u012f"+
    "\23\0\4\u011f\1\0\50\u011f\1\u0120\1\0\2\4\3\0"+
    "\7\4\1\u0130\1\4\1\0\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\21\0\1\u0131\35\0"+
    "\2\4\3\0\11\4\1\u0132\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\7\0\1\u0133\60\0"+
    "\1\u0134\45\0\1\u0135\30\0\4\u0135\20\0\2\4\3\0"+
    "\4\4\1\u0136\4\4\1\0\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\6\0\1\u0137\56\0"+
    "\1\u0138\64\0\1\u0139\40\0\2\4\3\0\1\u013a\10\4"+
    "\1\0\7\4\1\0\2\4\1\0\4\4\1\0\4\4"+
    "\11\0\1\4\16\0\1\u013b\45\0\1\u013c\72\0\1\u013d"+
    "\33\0\2\4\3\0\10\4\1\u013e\1\0\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\11\0"+
    "\1\u013f\64\0\1\u0140\52\0\1\u0141\41\0\2\4\3\0"+
    "\3\4\1\u0142\5\4\1\0\7\4\1\0\2\4\1\0"+
    "\4\4\1\0\4\4\11\0\1\4\6\0\1\u0143\74\0"+
    "\1\u0144\31\0\2\4\3\0\11\4\1\u0145\7\4\1\0"+
    "\2\4\1\0\4\4\1\0\4\4\11\0\1\4\21\0"+
    "\1\u0146\44\0\1\u0147\54\0\1\u0148\54\0\1\u0149\66\0"+
    "\1\u014a\44\0\1\u014b\65\0\1\u014c\60\0\1\u014d\54\0"+
    "\1\u014e\46\0\1\u014f\54\0\1\u0150\53\0\1\u0151\63\0"+
    "\1\u0152\62\0\1\u0153\46\0\1\u0154\51\0\1\u0155\55\0"+
    "\1\u0156\65\0\1\u0157\55\0\1\u0158\50\0\1\u0159\55\0"+
    "\1\u015a\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13524];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\10\1\1\11\2\1\3\11"+
    "\52\1\10\0\3\11\3\0\1\11\1\0\20\1\10\0"+
    "\3\1\3\0\14\1\10\0\17\1\12\0\14\1\3\0"+
    "\1\11\2\0\1\11\1\0\17\1\4\0\1\1\3\0"+
    "\1\1\2\0\3\1\1\0\3\1\1\0\3\1\4\0"+
    "\6\1\1\0\3\1\1\0\3\1\6\0\1\1\2\0"+
    "\3\1\1\0\2\1\1\0\3\1\1\11\3\0\6\1"+
    "\1\0\2\1\1\0\4\1\6\0\1\1\2\0\3\1"+
    "\1\0\1\1\1\0\3\1\2\0\3\1\1\0\1\11"+
    "\1\1\2\0\1\11\1\0\2\1\1\0\1\1\3\0"+
    "\1\1\2\0\1\11\1\0\2\1\3\0\1\1\3\0"+
    "\1\1\1\11\2\0\1\1\14\0\1\11\11\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return new Symbol(sym.TipoDato, yychar, yyline, yytext());
          }
        case 35: break;
        case 14: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 36: break;
        case 23: 
          { return new Symbol(sym.Accept, yychar, yyline, yytext());
          }
        case 37: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 38: break;
        case 26: 
          { return new Symbol(sym.Compute, yychar, yyline, yytext());
          }
        case 39: break;
        case 12: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 40: break;
        case 6: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 41: break;
        case 21: 
          { return new Symbol(sym.Nivel, yychar, yyline, yytext());
          }
        case 42: break;
        case 18: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 43: break;
        case 33: 
          { return new Symbol(sym.IdentificationDivision, yychar, yyline, yytext());
          }
        case 44: break;
        case 22: 
          { return new Symbol(sym.Value, yychar, yyline, yytext());
          }
        case 45: break;
        case 27: 
          { /* Línea con asterisco en la columna 7 */
          }
        case 46: break;
        case 5: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 47: break;
        case 19: 
          { return new Symbol(sym.Pic, yychar, yyline, yytext());
          }
        case 48: break;
        case 25: 
          { return new Symbol(sym.Display, yychar, yyline, yytext());
          }
        case 49: break;
        case 16: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 50: break;
        case 31: 
          { return new Symbol(sym.DataDivision, yychar, yyline, yytext());
          }
        case 51: break;
        case 3: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 52: break;
        case 30: 
          { return new Symbol(sym.ProgramId, yychar, yyline, yytext());
          }
        case 53: break;
        case 20: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 54: break;
        case 32: 
          { return new Symbol(sym.ProcedureDivision, yychar, yyline, yytext());
          }
        case 55: break;
        case 10: 
          { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
          }
        case 56: break;
        case 8: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 57: break;
        case 28: 
          { return new Symbol(sym.StopRun, yychar, yyline, yytext());
          }
        case 58: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 59: break;
        case 9: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 60: break;
        case 13: 
          { return new Symbol(sym.NumeroDecimal, yychar, yyline, yytext());
          }
        case 61: break;
        case 17: 
          { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
          }
        case 62: break;
        case 15: 
          { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
          }
        case 63: break;
        case 4: 
          { /*Ignore*/
          }
        case 64: break;
        case 7: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 65: break;
        case 11: 
          { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
          }
        case 66: break;
        case 34: 
          { return new Symbol(sym.WorkingStorageSection, yychar, yyline, yytext());
          }
        case 67: break;
        case 24: 
          { return new Symbol(sym.ValorEspecial, yychar, yyline, yytext());
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
