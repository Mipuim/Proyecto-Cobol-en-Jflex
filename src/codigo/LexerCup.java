/* The following code was generated by JFlex 1.4.3 on 5/07/24 00:34 */

package codigo;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/07/24 00:34 from the specification file
 * <tt>C:/Users/SARA/eclipse-workspace/ProyectoCobol/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  7,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    17,  0, 43,  0,  0,  0,  0, 33, 31, 32,  8, 37,  6, 25, 42, 38, 
    29, 30,  2,  2,  2,  2,  2, 28,  2,  3,  0,  0, 40, 39, 41,  0, 
     0,  5,  1, 15, 10, 11, 14, 23,  1,  9,  1, 27, 34, 24, 12, 16, 
    20,  1, 21, 19, 13, 22, 18, 26,  4, 36, 35,  0, 44,  0,  0,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 45,  1, 
     1,  1,  1,  1, 45,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\7\2\1\11\1\2\2\3\1\12\1\13\1\1"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\2\1\1\2"+
    "\1\3\1\4\1\5\1\6\1\7\1\10\7\2\1\11"+
    "\1\2\2\3\1\12\1\13\1\1\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\1\1\22\2\2\1\23\11\2"+
    "\1\24\4\0\1\25\1\26\1\27\1\0\1\30\2\0"+
    "\1\2\1\3\1\22\1\2\1\7\1\2\1\23\11\2"+
    "\1\24\4\0\1\25\1\26\1\27\1\0\1\30\1\0"+
    "\10\2\1\31\2\2\5\0\1\2\1\3\1\22\1\2"+
    "\1\7\7\2\1\31\2\2\5\0\1\30\1\0\4\2"+
    "\1\32\6\2\2\0\1\33\2\0\1\2\1\3\1\22"+
    "\1\2\1\7\3\2\1\32\6\2\2\0\1\33\2\0"+
    "\1\30\1\0\2\2\1\0\2\2\1\34\1\0\3\2"+
    "\2\0\1\2\1\3\1\22\1\2\1\7\1\2\1\0"+
    "\2\2\1\34\1\0\3\2\3\0\1\30\1\0\1\35"+
    "\1\2\1\0\2\2\1\0\3\2\1\36\1\0\1\2"+
    "\1\3\1\22\1\35\1\7\1\2\1\0\2\2\1\0"+
    "\3\2\1\36\2\0\1\30\1\0\1\2\1\0\1\37"+
    "\1\40\1\0\3\2\2\41\1\2\1\0\1\42\1\2"+
    "\2\0\1\41\1\2\1\0\1\2\2\0\1\2\2\0"+
    "\1\43\1\0\1\2\3\0\1\2\3\0\1\2\1\44"+
    "\2\0\1\2\14\0\1\45\11\0\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\270\0\212\0\346"+
    "\0\u0114\0\134\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228"+
    "\0\u0256\0\134\0\u0284\0\u02b2\0\u02e0\0\134\0\134\0\u030e"+
    "\0\134\0\134\0\134\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4"+
    "\0\u0422\0\u0450\0\u0450\0\u0422\0\u047e\0\u04ac\0\u03f4\0\u04da"+
    "\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u03f4\0\u061c"+
    "\0\u064a\0\u0678\0\u03f4\0\u03f4\0\u06a6\0\u03f4\0\u03f4\0\u03f4"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u0398\0\u078c\0\u07ba\0\212"+
    "\0\u07e8\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\270\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\134\0\134"+
    "\0\134\0\u03c6\0\134\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\u0a9a\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38"+
    "\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0ac8\0\u0d4c\0\u0d7a"+
    "\0\u0da8\0\u0dd6\0\u0a6c\0\u0a6c\0\u0a6c\0\u0e04\0\u0a6c\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\212\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u1112\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u10e4\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\u1534\0\212\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\134\0\u16d2\0\u1700\0\u172e\0\u175c"+
    "\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u172e\0\u189e"+
    "\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1700"+
    "\0\u1a0e\0\u1a3c\0\u1700\0\u1a6a\0\u1a98\0\u1ac6\0\u1af4\0\u1b22"+
    "\0\u1b50\0\212\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36\0\u1c64"+
    "\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6\0\u1dd4"+
    "\0\u1e02\0\u1c92\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16"+
    "\0\u1f44\0\u1c64\0\u1f72\0\212\0\u1fa0\0\u1fce\0\u1ffc\0\u202a"+
    "\0\u2058\0\u2086\0\u20b4\0\u20e2\0\134\0\u2110\0\u213e\0\u216c"+
    "\0\u219a\0\u213e\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae"+
    "\0\u22dc\0\u230a\0\u2338\0\u2110\0\u2366\0\u2394\0\u2110\0\u23c2"+
    "\0\u23f0\0\u241e\0\212\0\212\0\u244c\0\u247a\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532\0\u2560\0\u258e\0\134\0\u25bc\0\u25ea\0\u2618"+
    "\0\u2646\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788"+
    "\0\u27b6\0\134\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca"+
    "\0\u28f8\0\u2926\0\u2954\0\u2982\0\134\0\u29b0\0\u29de\0\u2a0c"+
    "\0\u2a3a\0\u2a68\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c"+
    "\0\u2baa\0\u2bd8\0\u2c06\0\u2c34\0\134\0\u2c62\0\u2c90\0\u2cbe"+
    "\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\134\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\2\11\1\12"+
    "\1\13\1\14\1\15\3\4\1\16\1\4\1\11\1\17"+
    "\1\20\1\21\4\4\1\22\1\23\1\4\1\24\1\25"+
    "\1\5\1\26\1\27\1\30\3\4\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\3\1\4\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\11\1\47\1\50"+
    "\1\51\1\52\3\41\1\53\1\41\1\46\1\54\1\55"+
    "\1\56\4\41\1\57\1\60\1\41\1\61\1\62\1\42"+
    "\1\63\1\64\1\65\3\41\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\40\1\41\57\0\5\4\3\0"+
    "\10\4\1\0\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\2\0\2\5\30\0\3\5\13\0\1\75\4\0"+
    "\5\4\3\0\6\4\1\76\1\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\6\0\2\11\11\0"+
    "\1\11\35\0\5\4\3\0\1\4\1\77\3\4\1\100"+
    "\2\4\1\0\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\1\0\4\4\1\101\3\0\1\102\7\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\1\0"+
    "\5\4\3\0\10\4\1\0\7\4\1\0\5\4\3\0"+
    "\1\103\2\4\10\0\1\4\1\0\5\4\3\0\7\4"+
    "\1\104\1\0\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\1\0\4\4\1\105\3\0\10\4\1\0\7\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\1\0\5\4"+
    "\3\0\4\4\1\106\3\4\1\0\7\4\1\0\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\1\107"+
    "\7\4\1\0\3\4\1\110\3\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\3\0\7\4\1\111"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\2\0\2\5\30\0\1\112\2\5\13\0\1\75\5\0"+
    "\2\5\30\0\2\5\1\112\13\0\1\75\20\0\1\113"+
    "\1\114\4\0\1\115\17\0\1\116\61\0\1\117\1\0"+
    "\1\120\53\0\1\121\10\0\2\75\30\0\3\75\17\0"+
    "\53\122\1\123\1\124\1\122\7\125\1\0\47\125\5\126"+
    "\1\125\1\0\1\125\10\126\1\125\7\126\1\125\5\126"+
    "\3\125\3\126\10\125\1\126\2\125\2\127\3\125\1\0"+
    "\24\125\3\127\13\125\1\130\4\125\5\126\1\125\1\0"+
    "\1\125\6\126\1\131\1\126\1\125\7\126\1\125\5\126"+
    "\3\125\3\126\10\125\1\126\6\125\1\132\1\11\11\125"+
    "\1\132\35\125\5\126\1\125\1\0\1\125\1\126\1\133"+
    "\3\126\1\134\2\126\1\125\7\126\1\125\5\126\3\125"+
    "\3\126\10\125\1\126\1\125\4\126\1\135\1\125\1\0"+
    "\1\125\1\136\7\126\1\125\7\126\1\125\5\126\3\125"+
    "\3\126\10\125\1\126\1\125\5\126\1\125\1\0\1\125"+
    "\10\126\1\125\7\126\1\125\5\126\3\125\1\137\2\126"+
    "\10\125\1\126\1\125\5\126\1\125\1\0\1\125\7\126"+
    "\1\140\1\125\7\126\1\125\5\126\3\125\3\126\10\125"+
    "\1\126\1\125\4\126\1\141\1\125\1\0\1\125\10\126"+
    "\1\125\7\126\1\125\5\126\3\125\3\126\10\125\1\126"+
    "\1\125\5\126\1\125\1\0\1\125\4\126\1\142\3\126"+
    "\1\125\7\126\1\125\5\126\3\125\3\126\10\125\1\126"+
    "\1\125\5\126\1\125\1\0\1\125\1\143\7\126\1\125"+
    "\3\126\1\144\3\126\1\125\5\126\3\125\3\126\10\125"+
    "\1\126\1\125\5\126\1\125\1\0\1\125\7\126\1\145"+
    "\1\125\7\126\1\125\5\126\3\125\3\126\10\125\1\126"+
    "\2\125\2\127\3\125\1\0\24\125\1\146\2\127\13\125"+
    "\1\130\5\125\2\127\3\125\1\0\24\125\2\127\1\146"+
    "\13\125\1\130\12\125\1\0\5\125\1\147\1\150\4\125"+
    "\1\151\17\125\1\152\21\125\1\0\37\125\1\153\1\125"+
    "\1\154\13\125\1\0\37\125\1\155\10\125\2\130\3\125"+
    "\1\0\24\125\3\130\17\125\7\156\1\122\43\156\1\157"+
    "\1\160\1\156\1\0\5\4\3\0\6\4\1\161\1\4"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\1\0\5\4\3\0\2\4\1\162\5\4\1\0\7\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\1\0\5\4"+
    "\3\0\4\4\1\163\3\4\1\0\7\4\1\0\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\10\4"+
    "\1\0\1\4\1\164\5\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\5\4\3\0\10\4\1\0\1\4"+
    "\1\165\5\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\1\0\5\4\3\0\10\4\1\0\6\4\1\166\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\3\0"+
    "\10\4\1\0\7\4\1\0\5\4\3\0\1\167\2\4"+
    "\10\0\1\4\1\0\5\4\3\0\7\4\1\170\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\1\0"+
    "\5\4\3\0\6\4\1\171\1\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\3\0"+
    "\7\4\1\172\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\5\4\3\0\10\4\1\0\3\4"+
    "\1\173\3\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\25\0\1\174\35\0\1\175\53\0\1\176\65\0\1\177"+
    "\117\0\1\122\7\200\1\0\47\200\5\201\1\200\1\0"+
    "\1\200\10\201\1\200\7\201\1\200\5\201\3\200\3\201"+
    "\10\200\1\201\2\200\2\202\3\200\1\0\24\200\3\202"+
    "\13\200\1\203\5\200\2\203\3\200\1\0\24\200\3\203"+
    "\20\200\5\201\1\200\1\0\1\200\6\201\1\204\1\201"+
    "\1\200\7\201\1\200\5\201\3\200\3\201\10\200\1\201"+
    "\6\200\1\205\1\11\11\200\1\205\35\200\5\201\1\200"+
    "\1\0\1\200\2\201\1\206\5\201\1\200\7\201\1\200"+
    "\5\201\3\200\3\201\10\200\1\201\1\200\5\201\1\200"+
    "\1\0\1\200\4\201\1\207\3\201\1\200\7\201\1\200"+
    "\5\201\3\200\3\201\10\200\1\201\1\200\5\201\1\200"+
    "\1\0\1\200\10\201\1\200\1\201\1\210\5\201\1\200"+
    "\5\201\3\200\3\201\10\200\1\201\1\200\5\201\1\200"+
    "\1\0\1\200\10\201\1\200\1\201\1\211\5\201\1\200"+
    "\5\201\3\200\3\201\10\200\1\201\1\200\5\201\1\200"+
    "\1\0\1\200\10\201\1\200\6\201\1\212\1\200\5\201"+
    "\3\200\3\201\10\200\1\201\1\200\5\201\1\200\1\0"+
    "\1\200\10\201\1\200\7\201\1\200\5\201\3\200\1\213"+
    "\2\201\10\200\1\201\1\200\5\201\1\200\1\0\1\200"+
    "\7\201\1\214\1\200\7\201\1\200\5\201\3\200\3\201"+
    "\10\200\1\201\1\200\5\201\1\200\1\0\1\200\6\201"+
    "\1\215\1\201\1\200\7\201\1\200\5\201\3\200\3\201"+
    "\10\200\1\201\1\200\5\201\1\200\1\0\1\200\7\201"+
    "\1\216\1\200\7\201\1\200\5\201\3\200\3\201\10\200"+
    "\1\201\1\200\5\201\1\200\1\0\1\200\10\201\1\200"+
    "\3\201\1\217\3\201\1\200\5\201\3\200\3\201\10\200"+
    "\1\201\7\200\1\0\15\200\1\220\35\200\1\221\1\200"+
    "\1\0\51\200\1\222\3\200\1\0\55\200\1\0\3\200"+
    "\1\223\42\200\7\224\1\122\43\224\1\225\1\226\1\224"+
    "\7\200\1\0\45\200\1\224\1\0\5\4\3\0\2\4"+
    "\1\227\5\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\5\4\3\0\3\4\1\230\4\4"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\1\0\4\4\1\231\3\0\10\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\3\0"+
    "\10\4\1\0\2\4\1\232\4\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\3\0\2\4\1\233"+
    "\5\4\1\0\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\1\0\5\4\3\0\10\4\1\0\2\4\1\234"+
    "\4\4\1\0\5\4\3\0\3\4\10\0\1\4\1\0"+
    "\5\4\3\0\10\4\1\0\4\4\1\235\2\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\3\0"+
    "\10\4\1\0\2\4\1\236\4\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\3\0\6\4\1\237"+
    "\1\4\1\0\5\4\1\240\1\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\3\0\10\4\1\0"+
    "\7\4\1\0\1\4\1\241\3\4\3\0\3\4\10\0"+
    "\1\4\26\0\1\242\71\0\1\243\54\0\1\244\41\0"+
    "\1\245\30\0\7\246\1\0\47\246\5\247\1\246\1\0"+
    "\1\246\10\247\1\246\7\247\1\246\5\247\3\246\3\247"+
    "\10\246\1\247\2\246\2\250\3\246\1\0\24\246\3\250"+
    "\13\246\1\251\5\246\2\251\3\246\1\0\24\246\3\251"+
    "\20\246\5\247\1\246\1\0\1\246\2\247\1\252\5\247"+
    "\1\246\7\247\1\246\5\247\3\246\3\247\10\246\1\247"+
    "\6\246\1\253\1\11\11\246\1\253\35\246\5\247\1\246"+
    "\1\0\1\246\3\247\1\254\4\247\1\246\7\247\1\246"+
    "\5\247\3\246\3\247\10\246\1\247\1\246\4\247\1\255"+
    "\1\246\1\0\1\246\10\247\1\246\7\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\10\247\1\246\2\247\1\256\4\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\2\247\1\257\5\247\1\246\7\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\10\247\1\246\2\247\1\260\4\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\10\247\1\246\4\247\1\261\2\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\10\247\1\246\2\247\1\262\4\247\1\246\5\247"+
    "\3\246\3\247\10\246\1\247\1\246\5\247\1\246\1\0"+
    "\1\246\6\247\1\263\1\247\1\246\5\247\1\264\1\247"+
    "\1\246\5\247\3\246\3\247\10\246\1\247\1\246\5\247"+
    "\1\246\1\0\1\246\10\247\1\246\7\247\1\246\1\247"+
    "\1\265\3\247\3\246\3\247\10\246\1\247\7\246\1\0"+
    "\16\246\1\266\36\246\1\0\32\246\1\267\22\246\1\0"+
    "\31\246\1\270\23\246\1\0\15\246\1\271\30\246\7\272"+
    "\1\122\43\272\1\273\1\274\1\272\7\246\1\0\45\246"+
    "\1\272\1\0\5\4\3\0\10\4\1\0\2\4\1\275"+
    "\4\4\1\0\5\4\3\0\3\4\10\0\1\4\1\0"+
    "\5\4\3\0\4\4\1\276\3\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\3\0"+
    "\10\4\1\277\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\1\0\5\4\3\0\10\4\1\0\7\4\1\0"+
    "\5\4\3\0\1\300\2\4\10\0\1\4\1\0\5\4"+
    "\3\0\10\4\1\0\4\4\1\301\2\4\1\0\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\2\4"+
    "\1\302\5\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\5\4\3\0\10\4\1\303\7\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\1\0\5\4"+
    "\3\0\2\4\1\304\5\4\1\0\7\4\1\0\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\10\4"+
    "\1\0\3\4\1\305\3\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\5\4\3\0\1\306\7\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\13\0"+
    "\1\307\65\0\1\242\52\0\1\307\35\0\7\310\1\0"+
    "\47\310\5\311\1\310\1\0\1\310\10\311\1\310\7\311"+
    "\1\310\5\311\3\310\3\311\10\310\1\311\2\310\2\312"+
    "\3\310\1\0\24\310\3\312\13\310\1\313\5\310\2\313"+
    "\3\310\1\0\24\310\3\313\20\310\5\311\1\310\1\0"+
    "\1\310\10\311\1\310\2\311\1\314\4\311\1\310\5\311"+
    "\3\310\3\311\10\310\1\311\6\310\1\315\1\11\11\310"+
    "\1\315\35\310\5\311\1\310\1\0\1\310\4\311\1\316"+
    "\3\311\1\310\7\311\1\310\5\311\3\310\3\311\10\310"+
    "\1\311\1\310\5\311\1\310\1\0\1\310\10\311\1\317"+
    "\7\311\1\310\5\311\3\310\3\311\10\310\1\311\1\310"+
    "\5\311\1\310\1\0\1\310\10\311\1\310\7\311\1\310"+
    "\5\311\3\310\1\320\2\311\10\310\1\311\1\310\5\311"+
    "\1\310\1\0\1\310\10\311\1\310\4\311\1\321\2\311"+
    "\1\310\5\311\3\310\3\311\10\310\1\311\1\310\5\311"+
    "\1\310\1\0\1\310\2\311\1\322\5\311\1\310\7\311"+
    "\1\310\5\311\3\310\3\311\10\310\1\311\1\310\5\311"+
    "\1\310\1\0\1\310\10\311\1\323\7\311\1\310\5\311"+
    "\3\310\3\311\10\310\1\311\1\310\5\311\1\310\1\0"+
    "\1\310\2\311\1\324\5\311\1\310\7\311\1\310\5\311"+
    "\3\310\3\311\10\310\1\311\1\310\5\311\1\310\1\0"+
    "\1\310\10\311\1\310\3\311\1\325\3\311\1\310\5\311"+
    "\3\310\3\311\10\310\1\311\1\310\5\311\1\310\1\0"+
    "\1\310\1\326\7\311\1\310\7\311\1\310\5\311\3\310"+
    "\3\311\10\310\1\311\7\310\1\0\3\310\1\327\51\310"+
    "\1\0\13\310\1\330\41\310\1\0\10\310\1\327\35\310"+
    "\7\331\1\122\43\331\1\332\1\333\1\331\7\310\1\0"+
    "\45\310\1\331\1\0\5\4\3\0\4\4\1\334\3\4"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\1\0\5\4\3\0\1\335\7\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\12\0\1\336\44\0"+
    "\4\4\1\337\3\0\10\4\1\0\7\4\1\0\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\4\4"+
    "\1\340\3\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\25\0\1\341\31\0\5\4\3\0\1\4"+
    "\1\342\6\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\1\0\4\4\1\343\3\0\10\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\1\0"+
    "\5\4\3\0\3\4\1\344\4\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\41\0\1\345\14\0"+
    "\7\346\1\0\47\346\5\347\1\346\1\0\1\346\10\347"+
    "\1\346\7\347\1\346\5\347\3\346\3\347\10\346\1\347"+
    "\2\346\2\350\3\346\1\0\24\346\3\350\13\346\1\351"+
    "\5\346\2\351\3\346\1\0\24\346\3\351\20\346\5\347"+
    "\1\346\1\0\1\346\4\347\1\352\3\347\1\346\7\347"+
    "\1\346\5\347\3\346\3\347\10\346\1\347\6\346\1\353"+
    "\1\11\11\346\1\353\35\346\5\347\1\346\1\0\1\346"+
    "\1\354\7\347\1\346\7\347\1\346\5\347\3\346\3\347"+
    "\10\346\1\347\7\346\1\0\2\346\1\355\44\346\4\347"+
    "\1\356\1\346\1\0\1\346\10\347\1\346\7\347\1\346"+
    "\5\347\3\346\3\347\10\346\1\347\1\346\5\347\1\346"+
    "\1\0\1\346\4\347\1\357\3\347\1\346\7\347\1\346"+
    "\5\347\3\346\3\347\10\346\1\347\7\346\1\0\15\346"+
    "\1\360\31\346\5\347\1\346\1\0\1\346\1\347\1\361"+
    "\6\347\1\346\7\347\1\346\5\347\3\346\3\347\10\346"+
    "\1\347\1\346\4\347\1\362\1\346\1\0\1\346\10\347"+
    "\1\346\7\347\1\346\5\347\3\346\3\347\10\346\1\347"+
    "\1\346\5\347\1\346\1\0\1\346\3\347\1\363\4\347"+
    "\1\346\7\347\1\346\5\347\3\346\3\347\10\346\1\347"+
    "\7\346\1\0\31\346\1\364\23\346\1\0\3\346\1\365"+
    "\42\346\7\366\1\122\43\366\1\367\1\370\1\366\7\346"+
    "\1\0\45\346\1\366\1\0\5\4\3\0\5\4\1\371"+
    "\2\4\1\0\7\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\11\0\1\372\45\0\5\4\3\0\10\4\1\0"+
    "\7\4\1\0\5\4\3\0\2\4\1\373\10\0\1\4"+
    "\1\0\5\4\3\0\2\4\1\374\5\4\1\0\7\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\26\0\1\375"+
    "\30\0\5\4\3\0\10\4\1\0\4\4\1\376\2\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\1\0\5\4"+
    "\3\0\10\4\1\0\6\4\1\377\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\3\0\10\4\1\0"+
    "\5\4\1\u0100\1\4\1\0\5\4\3\0\3\4\10\0"+
    "\1\4\10\0\1\u0101\46\0\5\4\2\0\1\u0101\10\4"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\2\0\2\5\4\0\1\u0101\23\0\3\5\13\0\1\75"+
    "\5\0\2\75\4\0\1\u0101\23\0\3\75\25\0\2\11"+
    "\1\u0101\10\0\1\11\35\0\5\4\2\0\1\u0101\5\4"+
    "\1\371\2\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\10\0\1\u0101\1\372\45\0\5\4\2\0"+
    "\1\u0101\10\4\1\0\7\4\1\0\5\4\3\0\2\4"+
    "\1\373\10\0\1\4\1\0\5\4\2\0\1\u0101\2\4"+
    "\1\374\5\4\1\0\7\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\10\0\1\u0101\15\0\1\375\30\0\5\4"+
    "\2\0\1\u0101\10\4\1\0\4\4\1\376\2\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\1\0\5\4\2\0"+
    "\1\u0101\10\4\1\0\6\4\1\377\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\1\0\5\4\2\0\1\u0101\10\4"+
    "\1\0\5\4\1\u0100\1\4\1\0\5\4\3\0\3\4"+
    "\10\0\1\4\10\0\1\u0101\30\0\1\345\14\0\10\122"+
    "\1\u0102\42\122\1\123\1\124\1\122\10\0\1\u0101\44\0"+
    "\1\122\1\0\5\4\3\0\1\u0103\7\4\1\0\7\4"+
    "\1\0\5\4\3\0\3\4\10\0\1\4\22\0\1\u0104"+
    "\47\0\1\u0105\42\0\5\4\3\0\10\4\1\0\3\4"+
    "\1\u0106\3\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\1\0\5\4\3\0\10\4\1\0\7\4\1\u0107\5\4"+
    "\3\0\3\4\10\0\1\4\1\0\5\4\3\0\10\4"+
    "\1\0\7\4\1\u0108\5\4\3\0\3\4\10\0\1\4"+
    "\7\u0101\1\0\46\u0101\7\u0102\1\122\43\u0102\1\u0101\1\u0109"+
    "\1\u0102\1\0\5\4\3\0\6\4\1\u010a\1\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\11\0"+
    "\1\u010b\45\0\5\4\3\0\2\4\1\u010c\5\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\11\0"+
    "\1\u010d\67\0\1\u010e\32\0\7\u0101\1\0\45\u0101\1\u0102"+
    "\1\0\4\4\1\u010f\3\0\10\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\23\0\1\u0110\33\0"+
    "\5\4\3\0\10\4\1\u0111\7\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\12\0\1\u0112\60\0\1\u0113\41\0"+
    "\5\4\3\0\4\4\1\u0114\3\4\1\0\7\4\1\0"+
    "\5\4\3\0\3\4\10\0\1\4\11\0\1\u0115\56\0"+
    "\1\u0116\63\0\1\u0117\36\0\5\4\3\0\1\u0118\7\4"+
    "\1\0\7\4\1\0\5\4\3\0\3\4\10\0\1\4"+
    "\20\0\1\u0119\46\0\1\u011a\71\0\1\u011b\31\0\5\4"+
    "\3\0\7\4\1\u011c\1\0\7\4\1\0\5\4\3\0"+
    "\3\4\10\0\1\4\14\0\1\u011d\63\0\1\u011e\40\0"+
    "\1\u011f\51\0\5\4\3\0\3\4\1\u0120\4\4\1\0"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\11\0"+
    "\1\u0121\73\0\1\u0122\27\0\5\4\3\0\10\4\1\u0123"+
    "\7\4\1\0\5\4\3\0\3\4\10\0\1\4\23\0"+
    "\1\u0124\45\0\1\u0125\54\0\1\u0126\54\0\1\u0127\65\0"+
    "\1\u0128\45\0\1\u0129\64\0\1\u012a\60\0\1\u012b\54\0"+
    "\1\u012c\47\0\1\u012d\54\0\1\u012e\53\0\1\u012f\63\0"+
    "\1\u0130\61\0\1\u0131\47\0\1\u0132\51\0\1\u0133\55\0"+
    "\1\u0134\64\0\1\u0135\55\0\1\u0136\51\0\1\u0137\55\0"+
    "\1\u0138\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11776];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\6\1\1\11\7\1\1\11\3\1\2\11"+
    "\1\1\3\11\57\1\4\0\3\11\1\0\1\11\2\0"+
    "\21\1\4\0\3\1\1\0\1\1\1\0\13\1\5\0"+
    "\17\1\5\0\1\1\1\0\13\1\2\0\1\11\2\0"+
    "\17\1\2\0\1\1\2\0\1\1\1\0\2\1\1\0"+
    "\3\1\1\0\3\1\2\0\6\1\1\0\3\1\1\0"+
    "\3\1\3\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\3\1\1\11\1\0\6\1\1\0\2\1\1\0\4\1"+
    "\2\0\1\1\1\0\1\1\1\0\2\1\1\0\6\1"+
    "\1\0\1\11\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\1\1\2\0\1\11\1\0\1\1\3\0\1\1\3\0"+
    "\1\1\1\11\2\0\1\1\14\0\1\11\11\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 40: break;
        case 37: 
          { return new Symbol(sym.ProcedureDivision, yychar, yyline, yytext());
          }
        case 41: break;
        case 18: 
          { return new Symbol(sym.NumeroDecimal, yychar, yyline, yytext());
          }
        case 42: break;
        case 26: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 43: break;
        case 16: 
          { return new Symbol(sym.MayorQue, yychar, yyline, yytext());
          }
        case 44: break;
        case 13: 
          { return new Symbol(sym.Division, yychar, yyline, yytext());
          }
        case 45: break;
        case 30: 
          { return new Symbol(sym.ValorEspecial, yychar, yyline, yytext());
          }
        case 46: break;
        case 3: 
          { System.out.println("Numero: " + yytext()); return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 47: break;
        case 21: 
          { return new Symbol(sym.MenorIgual, yychar, yyline, yytext());
          }
        case 48: break;
        case 5: 
          { return new Symbol(sym.TipoAlfanumerico, yychar, yyline, yytext());
          }
        case 49: break;
        case 9: 
          { return new Symbol(sym.Resta, yychar, yyline, yytext());
          }
        case 50: break;
        case 11: 
          { return new Symbol(sym.ParentesisC, yychar, yyline, yytext());
          }
        case 51: break;
        case 27: 
          { return new Symbol(sym.TipoSignoNumero, yychar, yyline, yytext());
          }
        case 52: break;
        case 20: 
          { return new Symbol(sym.Nivel, yychar, yyline, yytext());
          }
        case 53: break;
        case 10: 
          { return new Symbol(sym.ParentesisA, yychar, yyline, yytext());
          }
        case 54: break;
        case 4: 
          { return new Symbol(sym.TipoEntero, yychar, yyline, yytext());
          }
        case 55: break;
        case 39: 
          { return new Symbol(sym.WorkingStorageSection, yychar, yyline, yytext());
          }
        case 56: break;
        case 33: 
          { /* Línea con asterisco en la columna 7 */
          }
        case 57: break;
        case 19: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 58: break;
        case 38: 
          { return new Symbol(sym.IdentificationDivision, yychar, yyline, yytext());
          }
        case 59: break;
        case 23: 
          { return new Symbol(sym.MayorIgual, yychar, yyline, yytext());
          }
        case 60: break;
        case 35: 
          { return new Symbol(sym.ProgramId, yychar, yyline, yytext());
          }
        case 61: break;
        case 15: 
          { return new Symbol(sym.MenorQue, yychar, yyline, yytext());
          }
        case 62: break;
        case 28: 
          { return new Symbol(sym.Value, yychar, yyline, yytext());
          }
        case 63: break;
        case 34: 
          { return new Symbol(sym.StopRun, yychar, yyline, yytext());
          }
        case 64: break;
        case 8: 
          { return new Symbol(sym.Multiplicacion, yychar, yyline, yytext());
          }
        case 65: break;
        case 12: 
          { return new Symbol(sym.Suma, yychar, yyline, yytext());
          }
        case 66: break;
        case 32: 
          { return new Symbol(sym.Compute, yychar, yyline, yytext());
          }
        case 67: break;
        case 6: 
          { return new Symbol(sym.TipoAlfabeto, yychar, yyline, yytext());
          }
        case 68: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 69: break;
        case 29: 
          { return new Symbol(sym.Accept, yychar, yyline, yytext());
          }
        case 70: break;
        case 22: 
          { return new Symbol(sym.Diferente, yychar, yyline, yytext());
          }
        case 71: break;
        case 25: 
          { return new Symbol(sym.Pic, yychar, yyline, yytext());
          }
        case 72: break;
        case 17: 
          { return new Symbol(sym.Punto, yychar, yyline, yytext());
          }
        case 73: break;
        case 7: 
          { /*Ignore*/
          }
        case 74: break;
        case 14: 
          { return new Symbol(sym.Igual, yychar, yyline, yytext());
          }
        case 75: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 76: break;
        case 36: 
          { return new Symbol(sym.DataDivision, yychar, yyline, yytext());
          }
        case 77: break;
        case 31: 
          { return new Symbol(sym.Display, yychar, yyline, yytext());
          }
        case 78: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
