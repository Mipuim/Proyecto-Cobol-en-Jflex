package codigo;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

parser code {:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Syntax error at line " + s.left + ", column " + s.right + ": " + s.value);
    }

    public Symbol getS(){
        return this.s;
    }
        
    // Añadir este método para utilizar ComplexSymbolFactory
    public ComplexSymbolFactory getSymbolFactory() {
        return new ComplexSymbolFactory();
    }

:};

terminal IdentificationDivision, DataDivision, ProcedureDivision, ProgramId,
	WorkingStorageSection, Nivel, ValorEspecial, StopRun, Display, Accept, Compute,
	TipoEntero, TipoAlfanumerico, TipoAlfabeto, TipoSignoNumero, ParentesisA, ParentesisC,
	Suma, Resta, Multiplicacion, Division, If, Else, Pic, Value, 
	Igual, MenorQue, MayorQue, MenorIgual, MayorIgual, Diferente, 
	Punto, Identificador, Numero, NumeroDecimal, Cadena, ERROR;

non terminal INICIO, DATA, PROCEDIMIENTO, DECLARACION, LITERAL, SENTENCIAS, SENTENCIA, 
	MOSTRAR, EXPRESION, CONDICIONALES_ESTRUCTURA, IFCONDITION, VALOR, CONDICION, TIPODATO;


INICIO ::= IdentificationDivision Punto ProgramId Punto Identificador Punto DATA PROCEDIMIENTO;

DATA ::= DataDivision Punto WorkingStorageSection Punto DECLARACION ;

DECLARACION ::= Nivel Identificador Pic TIPODATO LITERAL Punto |
				Nivel Identificador Pic TIPODATO Punto|
				Nivel Identificador Pic TIPODATO LITERAL Punto DECLARACION|
				Nivel Identificador Pic TIPODATO Punto DECLARACION;

TIPODATO ::= TipoEntero 		ParentesisA Numero ParentesisC |
				TipoAlfanumerico ParentesisA Numero ParentesisC |
				TipoAlfabeto 	ParentesisA Numero ParentesisC |
				TipoSignoNumero ParentesisA Numero ParentesisC ;

LITERAL ::= Value Numero ;

PROCEDIMIENTO ::= ProcedureDivision Punto SENTENCIAS StopRun Punto;

SENTENCIAS ::= SENTENCIA | SENTENCIAS SENTENCIA;

SENTENCIA ::= Display MOSTRAR Punto |
				Accept Identificador Punto |
				Compute Identificador Igual EXPRESION Punto |
				CONDICIONALES_ESTRUCTURA Punto;
				
MOSTRAR ::= Cadena | Identificador;

EXPRESION ::= Identificador | LITERAL |
				Identificador Suma Identificador |
				Identificador Resta Identificador |
				Identificador Multiplicacion Identificador |
				Identificador Division Identificador ;

CONDICIONALES_ESTRUCTURA ::= IFCONDITION;

IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA |
				If VALOR CONDICION VALOR SENTENCIA Else SENTENCIA;
		
VALOR ::= Identificador | Numero | Cadena | NumeroDecimal | ValorEspecial;

CONDICION ::= Igual | MenorQue | MayorQue | MenorIgual | MayorIgual | Diferente;
