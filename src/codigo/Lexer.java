/* The following code was generated by JFlex 1.4.3 on 4/07/24 15:19 */

package codigo;
import static codigo.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/07/24 15:19 from the specification file
 * <tt>C:/Users/SARA/eclipse-workspace/ProyectoCobol/src/codigo/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\17\11\0\1\5\1\37"+
    "\1\0\1\26\1\41\1\40\12\2\2\0\1\34\1\36\1\35\2\0"+
    "\1\15\1\1\1\14\1\7\1\10\1\13\1\24\1\1\1\6\1\1"+
    "\1\30\1\32\1\25\1\11\1\16\1\22\1\1\1\23\1\21\1\12"+
    "\1\31\1\20\1\27\1\1\1\33\1\1\4\0\1\1\1\0\32\1"+
    "\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\1\1\2\1\3\1\1\1\2\1\1\1\2\1\1"+
    "\1\2\1\1\1\2\1\1\1\2\1\1\1\2\1\1"+
    "\1\4\1\2\1\5\1\6\1\7\1\10\7\6\1\11"+
    "\1\6\1\12\1\13\1\14\1\15\1\16\1\17\1\6"+
    "\1\20\11\6\1\21\1\22\1\23\7\6\1\24\16\6"+
    "\1\5\2\6\1\25\1\5\7\6\1\26\4\6\1\20"+
    "\1\27\1\6\1\30\6\6\1\31\1\6\2\11\7\6"+
    "\1\5\1\32\12\6\1\33\5\6\1\5\4\6\1\5"+
    "\4\6\1\34\11\6\1\35\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u0242\0\u02a8\0\u0242\0\u0242"+
    "\0\u02ca\0\u02ec\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396\0\u0242"+
    "\0\u03b8\0\u03da\0\u03fc\0\u0242\0\u0242\0\u0242\0\u0242\0\u041e"+
    "\0\u02a8\0\u0440\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u03fc\0\u0242\0\u0242\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u030e\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u02a8\0\u08a2"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u02a8"+
    "\0\u09b2\0\u09d4\0\u09f6\0\u0a18\0\u0a3a\0\u02a8\0\u0a5c\0\u02a8"+
    "\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u02a8\0\u0b4a"+
    "\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a"+
    "\0\u0c7c\0\u0c9e\0\u041e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u0d48"+
    "\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2\0\u02a8\0\u0e14\0\u0e36"+
    "\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24\0\u0f46"+
    "\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u02a8\0\u1012\0\u1034"+
    "\0\u1056\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100\0\u1122\0\u02a8"+
    "\0\u02a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\3\1\4\1\5\12\3\1\4\22\3\3\6\1\7"+
    "\1\5\12\6\1\7\22\6\4\3\1\0\40\3\1\4"+
    "\1\0\12\3\1\4\22\3\42\0\4\10\1\0\40\10"+
    "\1\11\1\0\12\10\1\11\22\10\4\12\1\0\40\12"+
    "\1\13\1\0\12\12\1\13\22\12\4\14\1\0\40\14"+
    "\1\15\1\0\12\14\1\15\22\14\4\16\1\0\40\16"+
    "\1\17\1\0\12\16\1\17\22\16\4\20\1\0\40\20"+
    "\1\21\1\0\12\20\1\21\22\20\4\22\1\0\1\23"+
    "\37\22\1\24\1\0\1\23\11\22\1\24\22\22\1\25"+
    "\1\26\1\27\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\4\23\1\0\35\23\1\25\1\26\1\27\1\24"+
    "\1\0\1\30\1\31\1\32\4\26\1\33\1\34\1\26"+
    "\1\24\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\50\3\26\1\51"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\52\1\32"+
    "\4\26\1\33\1\53\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\34\1\54\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\4\26\1\55\1\34\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\56\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\2\26\1\57\1\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\60\1\32\4\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\1\61"+
    "\2\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\34\1\62\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\1\26\1\27\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\63\1\64\1\45\1\46\1\47\1\25\1\26\1\27"+
    "\1\25\1\0\1\30\1\31\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\65\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\52\1\32\1\66\3\26"+
    "\1\33\1\53\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\50"+
    "\3\26\1\51\1\33\1\34\1\26\1\25\1\35\1\67"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\2\26\1\70\1\26\1\55\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\2\26\1\71\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\72\1\34\1\54\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\32"+
    "\4\26\1\55\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\2\26\1\73\1\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\34\1\74\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\50\3\26\1\51\1\75\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\32\4\26\1\33"+
    "\1\34\1\76\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\1\77"+
    "\2\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\1\26\1\100\2\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\2\26\1\57\1\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\101\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\33\1\102\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\32"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\103"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\1\104\3\26\1\33\1\34\1\54\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\1\26\1\105"+
    "\2\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\32\4\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\106\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\107\1\34\1\26\1\25\1\35\1\36\1\37\1\26"+
    "\1\110\1\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\4\26\1\33\1\34\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\1\111\3\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\2\26\1\112\1\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\60\1\32\4\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\1\61"+
    "\2\26\1\40\1\41\2\26\1\113\1\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\55\1\34\1\26\1\114"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\60\1\32\4\26\1\33\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\1\61\2\26\1\40\1\41"+
    "\1\26\1\115\2\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\32"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\116"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\1\117\3\26\1\33\1\34\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\60\1\32\4\26\1\33\1\34\1\26\1\120"+
    "\1\35\1\36\1\37\1\61\2\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\1\121\3\26\1\33"+
    "\1\34\1\54\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\1\122"+
    "\2\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\123"+
    "\1\32\4\26\1\33\1\34\1\26\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\124\1\32\4\26\1\33\1\34\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\125\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\1\26\1\27"+
    "\1\25\1\0\1\30\1\31\1\126\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\32\2\26\1\127"+
    "\1\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\60"+
    "\1\32\2\26\1\130\1\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\1\61\2\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\1\26"+
    "\1\27\1\25\1\0\1\30\1\31\1\32\4\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\1\131\2\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\132"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\133\1\26\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\50\1\26\1\134\1\26\1\51\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\50\3\26\1\135"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\32"+
    "\4\26\1\55\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\3\26\1\136\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\137\1\32\4\26\1\33\1\53\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\1\140\3\26\1\33\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\1\26\1\141\2\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\52\1\32"+
    "\4\26\1\33\1\53\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\1\26\1\142\2\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\55\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\2\26\1\143\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\1\26\1\144\1\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\145\1\32"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\50\3\26\1\51\1\33\1\34\1\26\1\25\1\146"+
    "\1\67\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\1\26\1\147\2\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\32\4\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\1\150\2\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\32"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\151\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\34\1\26\1\25\1\35\1\36"+
    "\1\37\3\26\1\152\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\50\3\26\1\51\1\153\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\154\1\32\4\26\1\33\1\56\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\1\155\3\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\1\26\1\27\1\25\1\0\1\30\1\156\1\32"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\1\26\1\27\1\25\1\0\1\30"+
    "\1\31\1\32\4\26\1\33\1\34\1\26\1\25\1\35"+
    "\1\157\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\4\26\1\33\1\160\1\54\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\50\3\26\1\51\1\33\1\34"+
    "\1\26\1\25\1\35\1\161\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\32\4\26\1\33"+
    "\1\34\1\26\1\162\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\163\3\26"+
    "\1\51\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\2\26\1\164\1\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\2\26\1\165\1\26\1\55"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\166\1\32\2\26"+
    "\1\57\1\26\1\33\1\34\1\26\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\1\26\1\27\1\25\1\0"+
    "\1\30\1\31\1\167\4\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\4\26\1\33\1\34\1\170"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\171\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\50\3\26\1\51"+
    "\1\33\1\34\1\172\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\173\1\32"+
    "\4\26\1\33\1\53\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\34\1\26\1\25\1\35\1\36"+
    "\1\106\1\174\2\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\50\3\26\1\51\1\33\1\34\1\175"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\1\26\1\176\2\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\50"+
    "\3\26\1\51\1\33\1\34\1\26\1\25\1\177\1\67"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\4\26\1\33\1\200\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\32\1\26\1\201\2\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\202\1\32\4\26\1\33"+
    "\1\56\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\4\26"+
    "\1\55\1\34\1\26\1\25\1\35\1\36\1\37\1\26"+
    "\1\203\1\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\4\26\1\33\1\34\1\26\1\204\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\31\1\50\3\26\1\51\1\33\1\34\1\26"+
    "\1\25\1\35\1\205\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\1\206\3\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\1\26\1\27\1\25\1\0\1\30\1\31\1\207"+
    "\4\26\1\33\1\34\1\26\1\25\1\35\1\36\1\37"+
    "\3\26\1\40\1\41\4\26\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\25\2\26\1\25\1\0\1\30\1\210"+
    "\1\32\2\26\1\57\1\26\1\33\1\34\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\4\26\1\33\1\34\1\26"+
    "\1\211\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\212\1\32\4\26\1\33\1\53"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\50\3\26\1\51"+
    "\1\33\1\34\1\213\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\1\26\1\27\1\25\1\0\1\30\1\31"+
    "\1\32\4\26\1\33\1\34\1\26\1\25\1\35\1\214"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\50\3\26\1\51\1\33\1\34\1\26\1\25"+
    "\1\215\1\67\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\1\26\1\216\2\26\1\33"+
    "\1\34\1\26\1\25\1\35\1\36\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\1\217"+
    "\1\26\1\57\1\26\1\33\1\34\1\26\1\25\1\35"+
    "\1\36\1\37\3\26\1\40\1\41\4\26\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\25\2\26\1\25\1\0"+
    "\1\30\1\220\1\32\4\26\1\33\1\56\1\26\1\25"+
    "\1\35\1\36\1\37\3\26\1\40\1\41\4\26\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\25\2\26\1\25"+
    "\1\0\1\30\1\31\1\32\4\26\1\221\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\50\3\26\1\51\1\33"+
    "\1\34\1\26\1\25\1\35\1\222\1\37\3\26\1\40"+
    "\1\41\4\26\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\25\2\26\1\25\1\0\1\30\1\31\1\32\2\26"+
    "\1\223\1\26\1\33\1\34\1\54\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\224\1\32\2\26\1\57\1\26\1\33\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\225\1\32\4\26\1\33\1\34"+
    "\1\26\1\25\1\35\1\36\1\37\3\26\1\40\1\41"+
    "\4\26\1\42\1\43\1\44\1\45\1\46\1\47\1\25"+
    "\2\26\1\25\1\0\1\30\1\31\1\50\3\26\1\51"+
    "\1\33\1\34\1\226\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\25\2\26\1\25\1\0\1\30\1\31\1\50"+
    "\3\26\1\51\1\33\1\34\1\227\1\25\1\35\1\36"+
    "\1\37\3\26\1\40\1\41\4\26\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\25\2\26\1\25\1\0\1\30"+
    "\1\31\1\32\1\26\1\230\2\26\1\33\1\34\1\26"+
    "\1\25\1\35\1\36\1\37\3\26\1\40\1\41\4\26"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\25\2\26"+
    "\1\25\1\0\1\30\1\31\1\32\1\26\1\231\2\26"+
    "\1\33\1\34\1\26\1\25\1\35\1\36\1\37\3\26"+
    "\1\40\1\41\4\26\1\42\1\43\1\44\1\45\1\46"+
    "\1\47";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4420];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\1\1\11\224\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[153];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 102) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { lexeme=yytext().substring(yytext().indexOf("WORKING-STORAGE SECTION")); 	return WorkingStorageSection;
          }
        case 31: break;
        case 6: 
          { lexeme=yytext().substring(7); return Identificador;
          }
        case 32: break;
        case 21: 
          { lexeme=yytext().substring(yytext().indexOf("VALUE")); 							return Value;
          }
        case 33: break;
        case 19: 
          { lexeme=yytext().substring(yytext().indexOf(">=")); 		return MayorIgual;
          }
        case 34: break;
        case 12: 
          { lexeme=yytext().substring(yytext().indexOf("=")); 		return Igual;
          }
        case 35: break;
        case 7: 
          { lexeme=yytext().substring(7); 	return Numero;
          }
        case 36: break;
        case 27: 
          { lexeme=yytext().substring(yytext().indexOf("DATA DIVISION")); 				return DataDivision;
          }
        case 37: break;
        case 25: 
          { lexeme=yytext().substring(yytext().indexOf("STOP RUN")); 					return StopRun;
          }
        case 38: break;
        case 24: 
          { lexeme=yytext().substring(yytext().indexOf("COMPUTE")); 					return Compute;
          }
        case 39: break;
        case 15: 
          { lexeme=yytext().substring(yytext().indexOf(".")); 		return Punto;
          }
        case 40: break;
        case 3: 
          { return Linea;
          }
        case 41: break;
        case 14: 
          { lexeme=yytext().substring(yytext().indexOf("/")); 		return Division;
          }
        case 42: break;
        case 4: 
          { /* Línea con asterisco en la columna 7 */
          }
        case 43: break;
        case 18: 
          { lexeme=yytext().substring(yytext().indexOf("<=")); 		return MenorIgual;
          }
        case 44: break;
        case 29: 
          { lexeme=yytext().substring(yytext().indexOf("IDENTIFICATION DIVISION")); 	return IdentificationDivision;
          }
        case 45: break;
        case 22: 
          { lexeme=yytext().substring(yytext().indexOf("ACCEPT")); 					return Accept;
          }
        case 46: break;
        case 8: 
          { lexeme=yytext().substring(yytext().indexOf("*")); 		return Multiplicacion;
          }
        case 47: break;
        case 26: 
          { lexeme=yytext().substring(yytext().indexOf("PROGRAM-ID")); 				return PogramId;
          }
        case 48: break;
        case 16: 
          { lexeme=yytext().substring(yytext().indexOf("IF")); 		return If;
          }
        case 49: break;
        case 9: 
          { lexeme=yytext().substring(yytext().indexOf("-")); 		return Resta;
          }
        case 50: break;
        case 1: 
          { /* Ignorar cualquier cosa antes de la columna 8 */
          }
        case 51: break;
        case 11: 
          { lexeme=yytext().substring(yytext().indexOf(">")); 			return MayorQue;
          }
        case 52: break;
        case 28: 
          { lexeme=yytext().substring(yytext().indexOf("PROCEDURE DIVISION")); 		return ProcedureDivision;
          }
        case 53: break;
        case 5: 
          { return ERROR;
          }
        case 54: break;
        case 10: 
          { lexeme=yytext().substring(yytext().indexOf("<")); 			return MenorQue;
          }
        case 55: break;
        case 13: 
          { lexeme=yytext().substring(yytext().indexOf("+")); 		return Suma;
          }
        case 56: break;
        case 23: 
          { lexeme=yytext().substring(yytext().indexOf("DISPLAY")); 					return Display;
          }
        case 57: break;
        case 20: 
          { lexeme=yytext().substring(yytext().indexOf("PIC")); 						return Pic;
          }
        case 58: break;
        case 2: 
          { 
          }
        case 59: break;
        case 17: 
          { lexeme=yytext(); 		return Diferente;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
