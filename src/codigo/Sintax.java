
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jul 05 00:27:20 PET 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Fri Jul 05 00:27:20 PET 2024
  */
public class Sintax
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\003\012\000\002\002\004\000\002\004" +
    "\007\000\002\006\010\000\002\006\007\000\002\006\011" +
    "\000\002\006\010\000\002\020\006\000\002\020\006\000" +
    "\002\020\006\000\002\020\006\000\002\007\004\000\002" +
    "\005\007\000\002\010\003\000\002\010\004\000\002\011" +
    "\005\000\002\011\005\000\002\011\007\000\002\011\004" +
    "\000\002\012\003\000\002\012\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\014\003\000\002\015" +
    "\007\000\002\015\011\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\004\004\001\002\000\004\043\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\007\010\001\002\000\004\043\011\001\002\000" +
    "\004\044\012\001\002\000\004\043\013\001\002\000\004" +
    "\005\015\001\002\000\004\006\055\001\002\000\004\043" +
    "\016\001\002\000\004\010\017\001\002\000\004\043\020" +
    "\001\002\000\004\011\022\001\002\000\004\006\uffff\001" +
    "\002\000\004\044\023\001\002\000\004\033\024\001\002" +
    "\000\012\017\026\020\025\021\030\022\027\001\002\000" +
    "\004\023\052\001\002\000\004\023\047\001\002\000\004" +
    "\023\044\001\002\000\004\023\041\001\002\000\006\034" +
    "\033\043\034\001\002\000\004\043\037\001\002\000\004" +
    "\045\036\001\002\000\006\006\ufffd\011\022\001\002\000" +
    "\004\006\ufffb\001\002\000\004\043\ufff6\001\002\000\006" +
    "\006\ufffe\011\022\001\002\000\004\006\ufffc\001\002\000" +
    "\004\045\042\001\002\000\004\024\043\001\002\000\006" +
    "\034\ufff8\043\ufff8\001\002\000\004\045\045\001\002\000" +
    "\004\024\046\001\002\000\006\034\ufff7\043\ufff7\001\002" +
    "\000\004\045\050\001\002\000\004\024\051\001\002\000" +
    "\006\034\ufffa\043\ufffa\001\002\000\004\045\053\001\002" +
    "\000\004\024\054\001\002\000\006\034\ufff9\043\ufff9\001" +
    "\002\000\004\043\057\001\002\000\004\002\001\001\002" +
    "\000\012\014\062\015\060\016\064\031\067\001\002\000" +
    "\004\044\137\001\002\000\014\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\031\ufff4\001\002\000\006\044\134\047\135\001" +
    "\002\000\014\013\130\014\062\015\060\016\064\031\067" +
    "\001\002\000\004\044\112\001\002\000\004\043\111\001" +
    "\002\000\004\043\uffe6\001\002\000\014\012\073\044\074" +
    "\045\071\046\070\047\075\001\002\000\026\014\uffe0\015" +
    "\uffe0\016\uffe0\031\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\001\002\000\026\014\uffe2\015\uffe2\016" +
    "\uffe2\031\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\001\002\000\016\035\103\036\077\037\100\040" +
    "\104\041\101\042\102\001\002\000\026\014\uffdf\015\uffdf" +
    "\016\uffdf\031\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\001\002\000\026\014\uffe3\015\uffe3\016\uffe3" +
    "\031\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\001\002\000\026\014\uffe1\015\uffe1\016\uffe1\031\uffe1" +
    "\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\001" +
    "\002\000\014\012\073\044\074\045\071\046\070\047\075" +
    "\001\002\000\014\012\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\001\002\000\014\012\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\047\uffdc\001\002\000\014\012\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\001\002\000\014\012\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\001\002\000\014\012\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\001\002\000\014\012\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\001\002\000\012\014\062\015" +
    "\060\016\064\031\067\001\002\000\006\032\107\043\uffe5" +
    "\001\002\000\012\014\062\015\060\016\064\031\067\001" +
    "\002\000\004\043\uffe4\001\002\000\020\013\uffef\014\uffef" +
    "\015\uffef\016\uffef\031\uffef\032\uffef\043\uffef\001\002\000" +
    "\004\035\113\001\002\000\006\034\033\044\116\001\002" +
    "\000\004\043\uffeb\001\002\000\004\043\127\001\002\000" +
    "\014\025\121\026\120\027\122\030\117\043\uffec\001\002" +
    "\000\004\044\126\001\002\000\004\044\125\001\002\000" +
    "\004\044\124\001\002\000\004\044\123\001\002\000\004" +
    "\043\uffe8\001\002\000\004\043\uffea\001\002\000\004\043" +
    "\uffe9\001\002\000\004\043\uffe7\001\002\000\020\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\031\ufff0\032\ufff0\043\ufff0\001" +
    "\002\000\004\043\132\001\002\000\014\013\ufff3\014\ufff3" +
    "\015\ufff3\016\ufff3\031\ufff3\001\002\000\004\002\ufff5\001" +
    "\002\000\004\043\136\001\002\000\004\043\uffed\001\002" +
    "\000\004\043\uffee\001\002\000\020\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\031\ufff2\032\ufff2\043\ufff2\001\002\000\004" +
    "\043\140\001\002\000\020\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\031\ufff1\032\ufff1\043\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\004\005\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\010\062\011\060\014\064\015\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\132\001\001\000" +
    "\010\011\130\014\064\015\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\105\014\064\015\065" +
    "\001\001\000\002\001\001\000\010\011\107\014\064\015" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\113\013\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        System.out.println("Syntax error at line " + s.left + ", column " + s.right + ": " + s.value);
    }

    public Symbol getS(){
        return this.s;
    }
        
    // AÃ±adir este mÃ©todo para utilizar ComplexSymbolFactory
    public ComplexSymbolFactory getSymbolFactory() {
        return new ComplexSymbolFactory();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONDICION ::= Diferente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICION ::= MayorIgual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CONDICION ::= MenorIgual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= MayorQue 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= MenorQue 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= Igual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= ValorEspecial 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= NumeroDecimal 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= Cadena 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA Else SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*IFCONDITION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*IFCONDITION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDICIONALES_ESTRUCTURA ::= IFCONDITION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*CONDICIONALES_ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= Identificador Division Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= Identificador Resta Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= Identificador Suma Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= LITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MOSTRAR ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*MOSTRAR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MOSTRAR ::= Cadena 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*MOSTRAR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= CONDICIONALES_ESTRUCTURA Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= Compute Identificador Igual EXPRESION Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= Accept Identificador Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= Display MOSTRAR Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROCEDIMIENTO ::= ProcedureDivision Punto SENTENCIAS StopRun Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*PROCEDIMIENTO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERAL ::= Value Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*LITERAL*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TIPODATO ::= TipoSignoNumero ParentesisA Numero ParentesisC 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*TIPODATO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TIPODATO ::= TipoAlfabeto ParentesisA Numero ParentesisC 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*TIPODATO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TIPODATO ::= TipoAlfanumerico ParentesisA Numero ParentesisC 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*TIPODATO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // TIPODATO ::= TipoEntero ParentesisA Numero ParentesisC 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(14/*TIPODATO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECLARACION ::= Nivel Identificador Pic TIPODATO Punto DECLARACION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECLARACION ::= Nivel Identificador Pic TIPODATO LITERAL Punto DECLARACION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= Nivel Identificador Pic TIPODATO Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= Nivel Identificador Pic TIPODATO LITERAL Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DATA ::= DataDivision Punto WorkingStorageSection Punto DECLARACION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*DATA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= IdentificationDivision Punto ProgramId Punto Identificador Punto DATA PROCEDIMIENTO 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

