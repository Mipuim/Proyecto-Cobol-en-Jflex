
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jul 04 19:10:45 PET 2024
//----------------------------------------------------

package codigo;

import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.Symbol;

/** CUP v0.10k generated parser.
  * @version Thu Jul 04 19:10:45 PET 2024
  */
public class Sintax
 extends java_cup.runtime.lr_parser
{
  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\003\012\000\002\002\004\000\002\004" +
    "\010\000\002\006\011\000\002\006\007\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\005\007\000\002\010\003\000\002\010\004\000\002" +
    "\011\005\000\002\011\005\000\002\011\007\000\002\011" +
    "\004\000\002\012\003\000\002\012\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\014\003\000\002" +
    "\015\007\000\002\015\011\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\004\004\001\002\000\004\036\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\007\010\001\002\000\004\036\011\001\002\000" +
    "\004\037\012\001\002\000\004\036\013\001\002\000\004" +
    "\005\015\001\002\000\004\006\037\001\002\000\004\036" +
    "\016\001\002\000\004\010\017\001\002\000\004\036\020" +
    "\001\002\000\004\011\022\001\002\000\004\036\036\001" +
    "\002\000\004\037\023\001\002\000\004\026\024\001\002" +
    "\000\004\012\025\001\002\000\006\027\026\036\027\001" +
    "\002\000\012\013\033\040\032\041\030\042\034\001\002" +
    "\000\004\036\ufffd\001\002\000\004\036\ufffb\001\002\000" +
    "\004\036\035\001\002\000\004\036\ufffc\001\002\000\004" +
    "\036\ufff9\001\002\000\004\036\ufffa\001\002\000\004\036" +
    "\ufffe\001\002\000\004\006\uffff\001\002\000\004\036\041" +
    "\001\002\000\004\002\001\001\002\000\012\015\044\016" +
    "\042\017\046\024\051\001\002\000\004\037\121\001\002" +
    "\000\014\014\ufff7\015\ufff7\016\ufff7\017\ufff7\024\ufff7\001" +
    "\002\000\006\037\116\042\117\001\002\000\014\014\112" +
    "\015\044\016\042\017\046\024\051\001\002\000\004\037" +
    "\074\001\002\000\004\036\073\001\002\000\004\036\uffe9" +
    "\001\002\000\014\013\055\037\056\040\052\041\053\042" +
    "\057\001\002\000\026\015\uffe5\016\uffe5\017\uffe5\024\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\001" +
    "\002\000\026\015\uffe3\016\uffe3\017\uffe3\024\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\001\002\000" +
    "\016\030\065\031\061\032\062\033\066\034\063\035\064" +
    "\001\002\000\026\015\uffe2\016\uffe2\017\uffe2\024\uffe2\030" +
    "\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\001\002" +
    "\000\026\015\uffe6\016\uffe6\017\uffe6\024\uffe6\030\uffe6\031" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\001\002\000\026" +
    "\015\uffe4\016\uffe4\017\uffe4\024\uffe4\030\uffe4\031\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\001\002\000\014\013\055" +
    "\037\056\040\052\041\053\042\057\001\002\000\014\013" +
    "\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\001\002\000\014" +
    "\013\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\001\002\000" +
    "\014\013\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\001\002" +
    "\000\014\013\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\001" +
    "\002\000\014\013\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\001\002\000\014\013\uffde\037\uffde\040\uffde\041\uffde\042" +
    "\uffde\001\002\000\012\015\044\016\042\017\046\024\051" +
    "\001\002\000\006\025\071\036\uffe8\001\002\000\012\015" +
    "\044\016\042\017\046\024\051\001\002\000\004\036\uffe7" +
    "\001\002\000\020\014\ufff2\015\ufff2\016\ufff2\017\ufff2\024" +
    "\ufff2\025\ufff2\036\ufff2\001\002\000\004\030\075\001\002" +
    "\000\014\013\033\037\100\040\032\041\030\042\034\001" +
    "\002\000\004\036\uffee\001\002\000\004\036\111\001\002" +
    "\000\014\020\103\021\102\022\104\023\101\036\uffef\001" +
    "\002\000\004\037\110\001\002\000\004\037\107\001\002" +
    "\000\004\037\106\001\002\000\004\037\105\001\002\000" +
    "\004\036\uffeb\001\002\000\004\036\uffed\001\002\000\004" +
    "\036\uffec\001\002\000\004\036\uffea\001\002\000\020\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\024\ufff3\025\ufff3\036\ufff3" +
    "\001\002\000\004\036\114\001\002\000\014\014\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\024\ufff6\001\002\000\004\002\ufff8" +
    "\001\002\000\004\036\120\001\002\000\004\036\ufff0\001" +
    "\002\000\004\036\ufff1\001\002\000\020\014\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\024\ufff5\025\ufff5\036\ufff5\001\002\000" +
    "\004\036\122\001\002\000\020\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\024\ufff4\025\ufff4\036\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\013\001\001\000\004\005\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\044\011\042\014\046\015\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\114" +
    "\001\001\000\010\011\112\014\046\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\011\067\014" +
    "\046\015\047\001\001\000\002\001\001\000\010\011\071" +
    "\014\046\015\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\075\013\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
        
    // AÃ±adir este mÃ©todo para utilizar ComplexSymbolFactory
    public ComplexSymbolFactory getSymbolFactory() {
        return new ComplexSymbolFactory();
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONDICION ::= Diferente 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONDICION ::= MayorIgual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONDICION ::= MenorIgual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CONDICION ::= MayorQue 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CONDICION ::= MenorQue 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CONDICION ::= Igual 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(13/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= ValorEspecial 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= NumeroDecimal 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= Cadena 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(12/*VALOR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA Else SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*IFCONDITION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFCONDITION ::= If VALOR CONDICION VALOR SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(11/*IFCONDITION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDICIONALES_ESTRUCTURA ::= IFCONDITION 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(10/*CONDICIONALES_ESTRUCTURA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= Identificador Division Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= Identificador Multiplicacion Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION ::= Identificador Resta Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION ::= Identificador Suma Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION ::= LITERAL 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(9/*EXPRESION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MOSTRAR ::= Identificador 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*MOSTRAR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MOSTRAR ::= Cadena 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(8/*MOSTRAR*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= CONDICIONALES_ESTRUCTURA Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= Compute Identificador Igual EXPRESION Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= Accept Identificador Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= Display MOSTRAR Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(7/*SENTENCIA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIAS SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(6/*SENTENCIAS*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROCEDIMIENTO ::= ProcedureDivision Punto SENTENCIAS StopRun Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(3/*PROCEDIMIENTO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERAL ::= ValorEspecial 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*LITERAL*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERAL ::= Cadena 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*LITERAL*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERAL ::= NumeroDecimal 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*LITERAL*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LITERAL ::= Numero 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(5/*LITERAL*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECLARACION ::= Nivel Identificador Pic TipoDato Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DECLARACION ::= Nivel Identificador Pic TipoDato Value LITERAL Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(4/*DECLARACION*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DATA ::= DataDivision Punto WorkingStorageSection Punto DECLARACION Punto 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(2/*DATA*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // INICIO ::= IdentificationDivision Punto ProgramId Punto Identificador Punto DATA PROCEDIMIENTO 
            {
              Object RESULT = null;

              CUP$Sintax$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-0)).right, RESULT);
            }
          return CUP$Sintax$result;

          default:
            {
              throw new Exception(
                 "Invalid action number found in internal parse table");
            }

        }
    }
}

